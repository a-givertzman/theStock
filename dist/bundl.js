/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/place_pattern/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/libJS/generic.js":
/*!******************************!*\
  !*** ./src/libJS/generic.js ***!
  \******************************/
/*! exports provided: generateId, getTextSize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateId\", function() { return generateId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTextSize\", function() { return getTextSize; });\n\n\n\n\n\n\n// -------------------------------------------------------\n// Функция | Включает / отключает вывод в консоль\n//\nfunction disableConsole(disable) {\n    // console.groupCollapsed(\"global.generateId { \");\n    \n    if (disable)\n        console.log = function() {};\n\n    // console.groupEnd();\n}\n\n\n\n// -------------------------------------------------------\n// Функция | Генерирует уникальный ID длиной len символов\n//\nfunction generateId(len) {\n    // console.groupCollapsed(\"global.generateId { \");\n    \n    let arr = new Uint8Array((len || 7) / 2);\n    \n    window.crypto.getRandomValues(arr);\n    \n    let id = Array.from(arr, dec => ('0' + dec.toString(16)).substr(-2)).join('');\n    \n    // console.groupEnd();\n    return id;\n}\n\n\n\n// -------------------------------------------------------\n// Функция | Возвращает размер текста width x height в px\n//\nfunction getTextSize(text, font) {\n    let ctx = document.createElement('canvas').getContext('2d');\n    ctx.font = font;\n    let size = ctx.measureText(text);\n    size.height = size.actualBoundingBoxAscent - size.actualBoundingBoxDescent;\n    console.log('text size: %o', size);\n    return size;\n }\n \n\n//# sourceURL=webpack:///./src/libJS/generic.js?");

/***/ }),

/***/ "./src/libJS/graphic.js":
/*!******************************!*\
  !*** ./src/libJS/graphic.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\n\n\n\n// -------------------------------------------------------\n// Функция | осветляет или затемняет цвет в парамеетре color,\n//           переданный в формате #rrggbb\n//           на велдечину percent, переданную в процентах\nfunction shadeColor (color = \"#000000\", percent = 0) {\n    var num = parseInt (color.slice(1), 16);\n    var amt = Math.round(2.55 * percent);\n    var R = (num >> 16) + amt;\n    var G = (num >> 8 & 0x00FF) + amt;\n    var B = (num & 0x0000FF) + amt;\n    var new_color = (\"#\" + (0x1000000 +\n       (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +\n       (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +\n       (B < 255 ? B < 1 ? 0 : B : 255)).toString (16).slice (1));\n    return new_color;\n}\n\n\n\n\n//# sourceURL=webpack:///./src/libJS/graphic.js?");

/***/ }),

/***/ "./src/place_pattern/main.js":
/*!***********************************!*\
  !*** ./src/place_pattern/main.js ***!
  \***********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _libJS_generic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../libJS/generic */ \"./src/libJS/generic.js\");\n/* harmony import */ var _libJS_graphic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../libJS/graphic */ \"./src/libJS/graphic.js\");\n/* harmony import */ var _libJS_graphic__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_libJS_graphic__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ***********************************************************************\r\n// **                                                                   **\r\n// **                             M A I N                               **\r\n// **                                                                   **\r\n// ***********************************************************************\r\n\r\n\r\n\r\n// -------------------------------------------------------\r\n// КОНСТАНТЫ |\r\n//\r\n\r\n\r\n// формат выпадающего списка\r\nconst listFormat = ['code', '|', 'name', '|', 'wx', 'х', 'wy', 'х', 'wz', '|', 'iwx', 'х', 'iwy', 'х', 'iwz', '|', '(Внут item_count шт)']\r\n\r\n// формат вывода выбранного элемента выпадающего списка\r\nconst selectedFormat = ['code', ' | ', 'name'];\r\n\r\n\r\n// -------------------------------------------------------\r\n// ГЛОБАЛЬНЫЕ ФУНКЦИИ |\r\n//\r\n\r\n// -------------------------------------------------------\r\n// Слот | Страница полностью загружена\r\n//\r\nwindow.addEventListener(\"load\", () => {\r\n\r\n    console.group(\"index.php loaded\");\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Функция | Выводит статусное сообщение в элемент lblStatus\r\n    //           и убирает его через время timeout в миллисекундах\r\n    //           если timeout=0 то сообщение будет видимым пока\r\n    //           его не перекроет текст нового сообщения\r\n    //\r\n    function setStatus(statusText, showTimeout, clearTimeout) {\r\n        console.group(\"main.setStatus { text: %o\", statusText);\r\n\r\n        // показываем статус с задержкой showTimeout в миллисекундах\r\n        setTimeout(() => {\r\n            lblStatus.value = statusText;\r\n        }, showTimeout);\r\n\r\n        // если timeout больше 0\r\n        if (clearTimeout > 0) {\r\n\r\n            // стираем выведенное сообщение через время timeout в миллисекундах\r\n            setTimeout(() => {\r\n                lblStatus.value = \"\";\r\n            }, clearTimeout);\r\n        }\r\n\r\n        console.groupEnd(\"main.setStatus }\");\r\n    }\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // ЭЛЕМЕНТЫ DOM | Объявляем константы связи с элементами страницы и/или формы\r\n    //\r\n\r\n    var htmlDom = new HtmlDom();\r\n\r\n    const selectPanel = htmlDom.element(\"#selectPanel\");\r\n    const editPanel = htmlDom.element(\"#editPanel\");\r\n    const inpCodeEdit = htmlDom.element(\"#inpCode\");\r\n    const inpName = htmlDom.element(\"#inpName\");\r\n    const inpPayload = htmlDom.element(\"#inpPayload\");\r\n    const inpSizeWx = htmlDom.element(\"#inpSizeWx\");\r\n    const inpSizeWy = htmlDom.element(\"#inpSizeWy\");\r\n    const inpSizeWz = htmlDom.element(\"#inpSizeWz\");\r\n    const inpInternalSizeWx = htmlDom.element(\"#inpInternalSizeWx\");\r\n    const inpInternalSizeWy = htmlDom.element(\"#inpInternalSizeWy\");\r\n    const inpInternalSizeWz = htmlDom.element(\"#inpInternalSizeWz\");\r\n    const inpColor = htmlDom.element(\"#inpColor\");\r\n    const inpVolume = htmlDom.element(\"#inpVolume\");\r\n    const inpVolumeUnit = htmlDom.element(\"#inpVolumeUnit\");\r\n    const inpView = htmlDom.element(\"#inpView\");\r\n    const checkBoxHasContent = htmlDom.element(\"#checkBoxHasContent\");\r\n    const checkBoxByCoordinares = htmlDom.element(\"#checkBoxByCoordinares\");\r\n    const btnEdit = htmlDom.element(\"#btnEdit\");\r\n    const btnBack = htmlDom.element(\"#btnBack\");\r\n    const btnCopy = htmlDom.element(\"#btnCopy\");\r\n    const btnTurn = htmlDom.element(\"#btnTurn\");\r\n    const btnApply = htmlDom.element(\"#btnApply\");\r\n    const lblStatus = htmlDom.element(\"#lblStatus\");\r\n    const lblStatusEdit = htmlDom.element(\"#lblStatusEdit\");\r\n    const lblStatusChanged = htmlDom.element(\"#lblStatusChanged\");\r\n    const lblStatusInfo = htmlDom.element(\"#lblStatusInfo\");\r\n    // получаем и сохраняем указатель на <canvas> где будет вся графика\r\n    var canvas = htmlDom.element(\"#canvas\");\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // ИНИЦИАЛИЗАЦИЯ |\r\n    //\r\n\r\n    var selectedItem;                                                               // ссылка на текущий выбранный элемент\r\n    var dataHendler;                                                                // обработчик обмена данными с экранной формой\r\n    const subItemTypeCount = 9;                                                     // количество типов внутренних элементов\r\n    var editMode = false;                                                           // флагн режима редактирования\r\n\r\n    // настройки отображения, по умолчанию normalView\r\n    settings = normalView;\r\n\r\n    // Настраиваем размер и разрешение <canvas>\r\n    canvas.style.width = settings.canvasWx + 'px';\r\n    canvas.style.height = settings.canvasWy + 'px';\r\n    canvas.width = settings.canvasWx * 2;\r\n    canvas.height = settings.canvasWy * 2;\r\n\r\n    // Делает все инпуты недоступными для редактирования\r\n    htmlDom.setEnabled('.disabled, .mainInput, .subInput, .archeTypeSelectInput, #btnTurn, #btnApply, #btnCopy, #btnEdit');\r\n\r\n\r\n    // выпадающий список для выбора текущего элемента из базы данных\r\n    var packList = new SearchList(htmlDom.element(\"#packList\"));\r\n    packList.item0 = 'Новый';\r\n    packList.listFormat = listFormat;\r\n    packList.selectedFormat = selectedFormat;\r\n\r\n    // если в списке выбран нулевой пункт, то создаем новый элемент\r\n    packList.onItem0 = (event) => newItem(event);\r\n\r\n    // если в списке выбран не нулевой пункт\r\n    packList.onChange = (id) => setSelectedItem(id);\r\n\r\n\r\n    // выпадающий список для выбора прототипа текущего элемента из базы данных\r\n    var patternPackList = new SearchList(htmlDom.element(\"#patternPackList\"));\r\n    patternPackList.item0 = 'Тип';\r\n    patternPackList.listFormat = listFormat;\r\n    patternPackList.selectedFormat = selectedFormat;\r\n\r\n    // если в списке выбран нулевой пункт, то создаем новый элемент\r\n    // patternPackList.onItem0 = (event) => packNew(event);\r\n\r\n    // если в списке базовых элеменотов выбран не нулевой\r\n    patternPackList.onItem0 = (id) => setArchetypeId(id);\r\n    patternPackList.onChange = (id) => setArchetypeId(id);\r\n\r\n\r\n    // Блоки редактирования внутренних элементов,\r\n    // структура хранящая количество блоков в count\r\n    // и блоки в item с количеством горизонтальных рядов\r\n    // и количеством элементов в каждом ряде\r\n    var subBlock = new SubBlockContainer('subBlock_');\r\n\r\n\r\n    // загружаем данные из БД в массив dataSet\r\n    var url = '../place_pattern/getPlacePattern.php';\r\n    loadData(url, {searchQuery: '%'}, dataSet, dataModel,\r\n        function() {\r\n            packList.dataSet = dataSet;\r\n            patternPackList.dataSet = dataSet;\r\n            subBlock.item.forEach( (item, index) => {\r\n                item.dh = dataHendler;\r\n                item.packList.dataSet = dataSet;\r\n                dataHendler.setDataBind(item.packList, 'sub' + (index + 1)+ '_id', 'list', 'change');\r\n                dataHendler.setDataBind('#' + item._inpNx.id, 'x' + (index + 1), 'int', 'input');\r\n                dataHendler.setDataBind('#' + item._inpNy.id, 'y' + (index + 1), 'int', 'input');\r\n                dataHendler.setDataBind('#' + item._checkBox.id, 'inrow' + (index + 1), 'bool', 'change');\r\n                dataHendler.setDataBind('', 'position' + (index + 1), 'int', '');\r\n            });\r\n            console.log('dataSet: %o', dataSet)\r\n        },\r\n        function() {},\r\n    )\r\n\r\n\r\n    // создаем dataHendler\r\n    dataHendler = new DataHendler(dataModel);\r\n\r\n    // добавляем связи в dataHendler\r\n    dataHendler.setDataBind(patternPackList, 'archetype_id', 'list', 'cange');\r\n    dataHendler.setDataBind('#inpCode', 'code', 'text', 'input');\r\n    dataHendler.setDataBind('#inpName', 'name', 'text', 'input');\r\n    dataHendler.setDataBind('#inpPayload', 'payload', 'int', 'input');\r\n    dataHendler.setDataBind('#inpSizeWx', 'wx', 'int', 'input');\r\n    dataHendler.setDataBind('#inpSizeWy', 'wy', 'int', 'input');\r\n    dataHendler.setDataBind('#inpSizeWz', 'wz', 'int', 'input');\r\n    dataHendler.setDataBind('#inpInternalSizeWx', 'iwx', 'int', 'input');\r\n    dataHendler.setDataBind('#inpInternalSizeWy', 'iwy', 'int', 'input');\r\n    dataHendler.setDataBind('#inpInternalSizeWz', 'iwz', 'int', 'input');\r\n    dataHendler.setDataBind('#inpColor', 'color', 'color', 'input');\r\n    dataHendler.setDataBind('', 'view', 'int', '');\r\n    dataHendler.setDataBind('#checkBoxByCoordinares', 'bycoordinates', 'bool', 'change');\r\n    dataHendler.setDataBind('#lblStatusChanged', 'changed', 'text', '');\r\n    dataHendler.setDataBind('#lblStatusInfo', 'exceeded', 'text', '');\r\n\r\n\r\n    // создаем placePattern\r\n    // Это обработчик выбранного элемента\r\n    selectedItem = new PlacePattern(canvas, dataHendler);\r\n    selectedItem.iTypeCount = subItemTypeCount;\r\n    selectedItem.showText = true;\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Функция | Создание нового элемента\r\n    //\r\n    function newItem(id) {\r\n        console.group('main.packNew');\r\n\r\n        selectedItem.createNew();                                                   // создаем новый элемент\r\n\r\n        setEditMode(true);                                                          // включаем режим редактирования\r\n\r\n        inpCodeEdit.focus();\r\n\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Функция | Копирует элемент pack и добавляет копию в конец массива packs\r\n    //           Добавляет его в список <select>\r\n    //           Отображает скопированный элемент\r\n    //           И включает режим редактирования\r\n    //\r\n    function packCopy() {\r\n        console.group('packCopy');\r\n\r\n        selectedItem.createNew(selectedItem.dh.data);                               // создаем новый элемент\r\n\r\n        selectedItem.dh.data.code += ' copy'                                        // меняем обозначение скопированного элемента\r\n        \r\n        setEditMode(true);                                                          // включаем режим редактирования\r\n\r\n        inpCodeEdit.focus();\r\n\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Функция | Сохраняет элемент pack в базу данных\r\n    //           если объект новый то выполняет INSERT\r\n    //           Затем добавляет новый элемент в массив packs и в список <select>\r\n    //           иначе оновляет объект в базе\r\n    //\r\n    function packSave(pack) {\r\n        console.group('main.packSave');\r\n        console.log('pack: %o', pack);\r\n\r\n        setStatus('Сохранение данных', 0, 3000);\r\n\r\n        // если выделенный элемент существует\r\n        let exists = dataSet.find( function(item) {\r\n            return item ? (item.code == selectedItem.dh.data.code) : false;\r\n        });\r\n\r\n        if (!exists || !selectedItem.new) {\r\n\r\n            htmlDom.setEnabled('#btnApply, #btnBack', false);\r\n\r\n            // сохраняем его в базу данных\r\n            saveData(selectedItem.dh.data, dataSet, saveDataModel,\r\n\r\n                // если успешно\r\n                function(result) {\r\n\r\n                    console.log('pack: %o', pack);\r\n\r\n                    if (!(parseInt(result.errCount) > 0)) {\r\n\r\n                        if (selectedItem.new && result.data && (parseInt(result.data.id) > 0)) {\r\n\r\n                            selectedItem.new = false;\r\n\r\n                            selectedItem.dh.data.id = String(result.data.id);           // присваиваем новый id после сохранения\r\n\r\n                            dataSet[result.data.id] = selectedItem.dh.data;             // добавляем новый элемент в набор dataSet\r\n\r\n                            packList.selectedId = result.data.id;\r\n                            setSelectedItem(result.data.id)\r\n                        }\r\n                        // показываем сообщение в statusbar\r\n                        setStatus('Сохранено', 300, 5000);\r\n                        selectedItem.dh.changed = false;\r\n                    } else {\r\n                        setStatus('Ошибка', 300, 5000);\r\n                    }\r\n                    htmlDom.setEnabled('#btnApply, #btnBack', true);\r\n                },\r\n\r\n                // если сервер вернулошибку\r\n                function(XMLHttpRequest, textStatus) {\r\n\r\n                    setStatus('Ошибка', 300, 5000);\r\n                    htmlDom.setEnabled('#btnApply, #btnBack', true);\r\n                }\r\n            );\r\n        } else {\r\n            alert('Элемент с таким обозначением уже существует.');\r\n            htmlDom.setEnabled('#btnApply, #btnBack', true);\r\n        }\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // СИГНАЛЫ | Привязываем события\r\n    //\r\n\r\n\r\n    // Привязываем события\r\n    btnEdit.addEventListener('click', eventBtnEditClicked);\r\n    btnBack.addEventListener('click', eventBtnBackClicked);\r\n    btnTurn.addEventListener('click', eventbtnTurnClicked);\r\n    btnCopy.addEventListener('click', eventBtnCopyClicked);\r\n    btnApply.addEventListener('click', eventBtnSaveClicked);\r\n    checkBoxHasContent.addEventListener('change', eventCheckBoxHasContentChanged);\r\n    checkBoxByCoordinares.addEventListener('change', checkBoxByCoordinaresChanged);\r\n\r\n    // Привязываем события клика на элементе\r\n    canvas.addEventListener(\"click\", eventClick);\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Слот | Масштабирование элемента на canvas\r\n    //\r\n    canvas.addEventListener('wheel', function(evt) {\r\n        return false;\r\n        console.group('canvas.addEventListener wheel {');\r\n\r\n        evt.preventDefault();\r\n\r\n        var mousePos = getMousePos(canvas, evt);\r\n\r\n        // получаем выделленый элемент\r\n        var pack = selectedItem;\r\n\r\n        // если выделенный элемент есть\r\n        if (pack) {\r\n\r\n            var scale = pack.scale;\r\n\r\n            // то меняем выбранному элементу масштам\r\n            if (evt.deltaY < 0) {\r\n                console.log('canvas zoom out: ' + evt.deltaY);\r\n                scale = scale * 1.05;\r\n            }\r\n            if (evt.deltaY > 0) {\r\n                console.log('canvas zoom in: ' + evt.deltaY);\r\n                scale = scale * 0.95;\r\n            }\r\n            pack.scale = scale;\r\n        }\r\n\r\n        // var message = 'Mouse position: ' + mousePos.x + ',' + mousePos.y;\r\n        // lblStatusInfo.innerText = message;\r\n\r\n        console.groupEnd('canvas.addEventListener wheel }');\r\n    }, false);\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // СЛОТЫ | Обработка событий\r\n    //\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Слот | Перемещение мыши\r\n    //        Вывод сообщения о текущей позиции курсора мыши\r\n    //\r\n    canvas.addEventListener('mousemove', function(evt) {\r\n        return false;\r\n        // console.group('eventMouseMove { ');\r\n\r\n        var pos = getMousePos(canvas, evt);\r\n\r\n        // получаем выделленый элемент\r\n        var pack = selectedItem;\r\n\r\n        // если выбранный элемент существует\r\n        if (pack) {\r\n\r\n            // var message = 'Mouse pos: ' + pos.x + ',' + pos.y + ' | Scaled pos: ' + pos.x * selectedItem.scale + ',' + pos.y * selectedItem.scale;\r\n            // lblStatusInfo.innerText = message;\r\n\r\n            // то передаем элементу координаты курсора\r\n            // console.log('item mouse move: %o', pack);\r\n            // var pos = getMousePos(canvas, evt)\r\n            var mouseOver = pack.onMouseOver(pos.x, pos.y);\r\n            if (mouseOver) {canvas.style.cursor = 'pointer'} else {canvas.style.cursor = 'auto'}\r\n        }\r\n        // console.groupEnd();\r\n    }, false);\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Слот | Привязываем события клика на элементе\r\n    //\r\n    function eventClick(evt) {\r\n        console.group('eventClick');\r\n\r\n        // получаем выделленый элемент\r\n        var pack = selectedItem;\r\n\r\n        // если выделенный элемент есть\r\n        if (pack) {\r\n\r\n            // меняем глубину отображения\r\n            pack.dh.data.depth = (pack.dh.data.depth == 2) ? 0 : pack.dh.data.depth + 1;\r\n            console.log('selectedItem: %o', pack);\r\n\r\n            setStatus(\"Вложенных уровней: \" + pack.dh.data.depth, 0, 5000);\r\n\r\n            // то передаем клик элементу\r\n            // console.log('item mouse down: %o', pack);\r\n            // var pos = getMousePos(canvas, evt)\r\n            // var selected = pack.onClick(pos.x, pos.y);\r\n\r\n            pack.update();\r\n        }\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Функция | - Переключает форму и все необходимые элементы\r\n    //           в режим редактирования и обратно\r\n    //           - Сохраняем эелемент если он был изменен\r\n    //\r\n    function setEditMode(value) {\r\n        console.group('main.setEditMode');\r\n        console.log('selectedItem: %o', selectedItem);\r\n\r\n        editMode = value;\r\n\r\n        if (selectedItem.dh.data) {\r\n            console.log('set editMode to: %o', editMode);\r\n\r\n            if (editMode) {\r\n                // включаем режим редактирования [ РЕДАКТИРОВАТЬ ]\r\n\r\n                editPanel.classList.remove('hidden');                       // показываем поле для воода типа\r\n\r\n                selectPanel.classList.add('hidden');                        // прячем список для выбора типа\r\n\r\n                lblStatusEdit.value = 'Редактирование';\r\n\r\n            } else {\r\n                // отключаем режим редактирования [ НАЗАД ]\r\n\r\n                // console.log('selectedItem.dh.data.changed: %o', selectedItem.dh.changed);\r\n                // если элемент был изменен\r\n                if (selectedItem.dh.changed) {\r\n\r\n                    // Предлагаем пользователю сохранить изменения\r\n                    var reply = messageBox('Тип \"' + selectedItem.code + '\" был изменен, хотите сохранить?');\r\n\r\n                    // Если пользователь хочет сохранить изменения\r\n                    if (reply == btn.Yes) {\r\n\r\n                        console.log('выполнить: Сохранение элемента');\r\n\r\n                        packSave(selectedItem);                             // сохраняем элемент в БД\r\n                    } else {\r\n\r\n                        // возвращаемся к ранее выбранному элементу\r\n                        if (packList.prevouseId == 0) {\r\n\r\n                            selectedItem.dh.changed = false;\r\n                            packList.selectedId = null;\r\n                        } else {\r\n\r\n                            setSelectedItem(packList.prevouseId);\r\n                            packList.selectedId = packList.prevouseId;\r\n                        }\r\n                    }\r\n                }\r\n                editPanel.classList.add('hidden');                          // прячем поле для воода типа\r\n\r\n                selectPanel.classList.remove('hidden');                     // показываем список для выбора типа\r\n\r\n                lblStatusEdit.value = '';\r\n            }\r\n            // делаем инпуты доступными / блокируем\r\n            htmlDom.setEnabled('#btnApply', editMode);\r\n            htmlDom.setEnabled('#btnTurn', editMode);\r\n            htmlDom.setEnabled('#btnCopy', !editMode);\r\n            htmlDom.setEnabled('.mainInput', editMode && !(selectedItem.dh.data.archetype_id > 0));\r\n            htmlDom.setEnabled('#inpCode, #inpName', editMode);\r\n            htmlDom.setEnabled('#inpColor, #checkBoxHasContent', editMode);\r\n            htmlDom.setEnabled('.archeTypeSelectInput', editMode);\r\n            htmlDom.setEnabled('.subInput', editMode && checkBoxHasContent.checked);\r\n        }\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Обработка события нажатия кнопки \"Редактировать\"\r\n    //\r\n    function eventBtnEditClicked() {\r\n        console.group('eventBtnEditClicked');\r\n\r\n        // переходим в режим редактирования\r\n        setEditMode(true);\r\n\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Обработка события нажатия кнопки \"Назад\"\r\n    //\r\n    function eventBtnBackClicked() {\r\n        console.group('eventBtnBackClicked');\r\n\r\n        // выходим из режима 'редактирования\r\n        setEditMode(false);\r\n\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Обработка события нажатия кнопки \"Повернуть отображение по оси X\"\r\n    //\r\n    function eventbtnTurnClicked() {\r\n        console.group('eventbtnTurnClicked');\r\n\r\n        // текущее значение view\r\n        let viewIndex = selectedItem.dh.data['view'];\r\n\r\n        // вращаем view выбранного элемента по кругу от 0 до 5\r\n        selectedItem.dh.data['view'] = ((viewIndex + 1) < position.length) ? (viewIndex + 1) : 0;\r\n\r\n        console.log(\"view: %i\", selectedItem.dh.data['view']);\r\n\r\n        selectedItem.dh.changed = true;\r\n\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Слот | Обработка события нажатия кнопки SAVE\r\n    //\r\n    function eventBtnSaveClicked() {\r\n        console.group('eventBtnSaveClicked');\r\n\r\n        packSave(selectedItem);                                                     // сохраняем выбранный элемент\r\n\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Слот | Обработка событие нажатия кнопки \"КОПИРОВАТЬ\"\r\n    //\r\n    function eventBtnCopyClicked() {\r\n        console.group('main.eventBtnCopyClicked {');\r\n\r\n        packCopy();                                                                 // копируем выбранный элемент\r\n\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Функция | Вычисляет объем элемента\r\n    //\r\n    // function packVolume(pack) {\r\n    //     console.group('main.packVolume {');\r\n\r\n    //     var volume = pack.iwx * pack.iwy * pack.iwz;\r\n    //     var volumeString = \"\";\r\n    //     if (volume > 9999999) {\r\n    //         volume = volume / 1000000000;      // переводим в кубические метры\r\n    //         volumeString = volume + ' м' + '3'.sup();\r\n    //     } else if ((volume > 9999) && (volume <= 9999999)) {\r\n    //         volume = volume / 1000;        // переводим в кубические сантиметры\r\n    //         volumeString = volume + ' см' + '3'.sup();\r\n    //     } else {\r\n    //         volumeString = volume + ' мм' + '3'.sup();\r\n    //     }\r\n    //     console.groupEnd();\r\n    //     return volumeString;\r\n    // }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Слот | Событие изменение checkbox \"объект имеет содержимое\"\r\n    //\r\n    function eventCheckBoxHasContentChanged(e) {\r\n        console.group('main.eventCheckBoxHasContentChanged');\r\n\r\n        // если установлена галка Внутренние элементы\r\n        if (e.target.checked) {\r\n\r\n            htmlDom.setEnabled('.subInput', true);                               // делаем поля внутренних элементов доступными\r\n        } else {\r\n\r\n            htmlDom.setEnabled('.subInput', false);                              // блокируем делаем инпуты\r\n        }\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Слот | Изменение текстов полей ввода количества по горизонтали\r\n    //        и вертикали или ввода координат\r\n    //\r\n    function byCoordinaresInputsDisplayText(byCoordinares) {\r\n        console.group('main.checkBoxByCoordinaresChanged');\r\n\r\n        let itemsX = document.getElementsByClassName('subInputLabelX');\r\n        let itemsY = document.getElementsByClassName('subInputLabelY');\r\n\r\n        // если установлена галка по координатам\r\n        if (byCoordinares) {\r\n\r\n            // меняем тексты полей внутренних элементов\r\n            for (let i  = 0; i < itemsX.length; i++) {\r\n                itemsX[i].innerHTML = \"Координата<br>X\";\r\n                itemsY[i].innerHTML = \"Координата<br>Y\";\r\n            }\r\n        } else {\r\n\r\n            // меняем тексты полей внутренних элементов\r\n            for (let i  = 0; i < itemsX.length; i++) {\r\n                itemsX[i].innerHTML = \"Количество<br>по горизонтали\";\r\n                itemsY[i].innerHTML = \"Количество<br>по вертикали\";\r\n            }\r\n        }\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Слот | Событие изменение checkbox \"по координатам\"\r\n    //\r\n    function checkBoxByCoordinaresChanged(e) {\r\n        console.group('main.checkBoxByCoordinaresChanged');\r\n\r\n        byCoordinaresInputsDisplayText(e.target.checked);\r\n        \r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Функция | Изменение выбранного элемента\r\n    //           если в списке выбран новый\r\n    //           то создает новый pack\r\n    //           и переключает в режим редактирования\r\n    //\r\n    function setSelectedItem(id) {\r\n        console.group('main.setSelectedItem');\r\n        console.log('id: %o', id);\r\n\r\n        selectedItem.id = id;\r\n\r\n        let hasContent = (parseInt(selectedItem.dh.data.sub1_id, 10) > 0)\r\n            || (parseInt(selectedItem.dh.data.sub2_id, 10) > 0)\r\n            || (parseInt(selectedItem.dh.data.sub3_id, 10) > 0)\r\n            || (parseInt(selectedItem.dh.data.sub4_id, 10) > 0)\r\n            || (parseInt(selectedItem.dh.data.sub5_id, 10) > 0)\r\n            || (parseInt(selectedItem.dh.data.sub6_id, 10) > 0)\r\n            || (parseInt(selectedItem.dh.data.sub7_id, 10) > 0)\r\n            || (parseInt(selectedItem.dh.data.sub8_id, 10) > 0)\r\n            || (parseInt(selectedItem.dh.data.sub9_id, 10) > 0);\r\n\r\n        checkBoxHasContent.checked = hasContent ? true : false;\r\n\r\n        byCoordinaresInputsDisplayText(checkBoxByCoordinares.checked);\r\n\r\n        htmlDom.setEnabled('#btnCopy, #btnEdit', true);\r\n\r\n        // console.log('pack = %o', selectedItem);\r\n        console.groupEnd();\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------------\r\n    // Функция | Изменение прототипа выбранного элемента\r\n    //           Если в списке выбран нулевой (id = 0)\r\n    //           то создается базовый элемент и можно задать размеры\r\n    //           Если выбран ненулевой элемент, то выбранному\r\n    //           элементу dataHendker сообщает id его прототипа\r\n    //           и обновляем выбранный элемент\r\n    //\r\n    function setArchetypeId(id) {\r\n        console.group('main.setArchetypeId');\r\n        console.log('id: %o', id);\r\n\r\n        if (id > 0) {\r\n            selectedItem.archetype_id = id;\r\n        }\r\n\r\n        htmlDom.setEnabled('.mainInput', editMode && !(id > 0));\r\n        htmlDom.setEnabled('#inpCode, #inpName, #inpColor, #checkBoxHasContent', editMode);\r\n\r\n        console.groupEnd();\r\n    }\r\n});\n\n//# sourceURL=webpack:///./src/place_pattern/main.js?");

/***/ })

/******/ });